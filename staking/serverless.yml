plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

service: staking
provider:
  name: aws
  runtime: python3.6
  description: staking service.
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts
    serverSideEncryption: AES256
    tags:
      key1: staking
    deploymentPrefix: serverless
    tracing: true

custom:
  pythonRequirements:
    fileName: staking/requirement.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 5
  documentation:
    models:
      -
        name: "ErrorStatus"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            error:
              type: "object"
              properties:
                code:
                  type: "integer"
                message:
                  type: "string"
      -
        name: "ErrorResponse"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            status:
              type: "string"
            data:
              type: "object"
              properties:
                error:
                  $ref: "{{model: ErrorStatus}}"
      -
        name: "StakeSummary"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            status:
              type: "string"
            data:
              type: "object"
              properties:
                no_of_stakers:
                  type: "integer"
                total_reward:
                  type: "integer"
                total_stake_deposited:
                  type: "integer"
                error:
                  $ref: "{{model: ErrorStatus}}"
      -
        name: "Request"
        contentType: "application/json"
        schema: ${file(./staking/documentation/models/request.json)}
      -
        name: "Response"
        contentType: "application/json"
        schema: ${file(./staking/documentation/models/response.json)}

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirement.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - serverless.yml
    - test/**
    - Readme.md
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - node_modules/**
  include:
    - node_modules/singularitynet-stake-contracts/**

functions:
  get-stake-summary:
    handler: staking.application.handlers.stake_handler.get_stake_summary
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /stake-summary
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get stake summary"
            description: "Get total staked amount, reward given and unique stakers across all stake window."
            tags:
              - "summary"
            requestHeaders:
              -
                name: "Content-Type"
                description: "application/json"

            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Stake Summary"
                responseModels:
                  "application/json": "StakeSummary"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "ErrorResponse"

  get-all-stake-window-details:
    handler: staking.application.handlers.stake_handler.get_all_stake_windows
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /stake-windows
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get stake windows"
            description: "Get all stake windows for which stake approval is started or completed sorted by blockchain_id in descending order."
            tags:
              - "summary"
            requestHeaders:
              -
                name: "Content-Type"
                description: "application/json"

            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Stake Windows"
                responseModels:
                  "application/json": "Response"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "ErrorResponse"

  get-stake-window-details:
    handler: staking.application.handlers.stake_handler.get_stake_window
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /stake-window
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get stake windows"
            description: "Get all stake windows details"
            tags:
              - "summary"
            requestHeaders:
              -
                name: "Content-Type"
                description: "application/json"

            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Stake Windows"
                responseModels:
                  "application/json": "StakeWindows"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "ErrorResponse"

  get-stake-holder-details-for-active-stake-window:
    handler: staking.application.handlers.stake_handler.get_stake_holder_details_for_active_stake_window
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /stake-holder/active
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get stake holder"
            description: "Get stake holder details for active stake window and given stake address."
            tags:
              - "summary"
            requestHeaders:
              -
                name: "Content-Type"
                description: "application/json"
          queryParams:
            -
              name: "staker"
              description: "Staker Address(Ethereum Address)"
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Stake Holder"
                responseModels:
                  "application/json": "Response"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "ErrorResponse"

  get-stake-holders-for-claim-stake-windows:
    handler: staking.application.handlers.stake_handler.get_stake_holder_details_for_claim_stake_windows
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /stake-holder/claim
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get stake holder"
            description: "Get stake holder details for claim stake window and given stake address."
            tags:
              - "summary"
            requestHeaders:
              -
                name: "Content-Type"
                description: "application/json"
          queryParams:
            -
              name: "staker"
              description: "Staker Address(Ethereum Address)"
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Stake Holder"
                responseModels:
                  "application/json": "Response"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "ErrorResponse"

  get-stake-holder-transaction-details:
    handler: staking.application.handlers.stake_handler.get_all_transactions_of_stake_holder_for_given_address
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /transactions
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get staker transactions"
            description: "Get staker transactions for given staker address."
            tags:
              - "summary"
            requestHeaders:
              -
                name: "Content-Type"
                description: "application/json"
          queryParams:
            -
              name: "staker"
              description: "Staker Address(Ethereum Address)"
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Stake Holder"
                responseModels:
                  "application/json": "Response"
              -
                statusCode: "500"
                responseModels:
                  "application/json": "ErrorResponse"
  open-for-stake-consumer:
    warmup: true
    handler: staking.application.handlers.consumer_handlers.open_for_stake_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  submit-stake-consumer:
    warmup: true
    handler: staking.application.handlers.consumer_handlers.submit_stake_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  approved-stake-consumer:
    warmup: true
    handler: staking.application.handlers.consumer_handlers.approve_stake_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  reject-stake-consumer:
    warmup: true
    handler: staking.application.handlers.consumer_handlers.reject_stake_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  withdraw-stake-consumer:
    warmup: true
    handler: staking.application.handlers.consumer_handlers.withdraw_stake_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}


  auto-renew-stake-consumer:
    warmup: true
    handler: staking.application.handlers.consumer_handlers.auto_renew_stake_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}


  claim-stake-consumer:
    warmup: true
    handler: staking.application.handlers.consumer_handlers.claim_stake_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}


  update-auto-renewal-stake-consumer:
    warmup: true
    handler: staking.application.handlers.consumer_handlers.update_auto_renewal_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}